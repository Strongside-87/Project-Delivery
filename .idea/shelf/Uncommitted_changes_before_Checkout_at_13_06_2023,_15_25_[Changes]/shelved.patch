Index: 4_temporal_spatial_data_analysis.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Project 1: Analysis and Forecasting of NYC Taxi Rides\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"ExecuteTime\": {\n     \"end_time\": \"2023-06-13T12:53:49.522070Z\",\n     \"start_time\": \"2023-06-13T12:53:49.483730Z\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# The code makes sure that once there is change in the 'src/' folder, the \\n\",\n    \"# change will be automatically reloaded in the notebook.\\n\",\n    \"%reload_ext autoreload\\n\",\n    \"%autoreload 2\\n\",\n    \"%aimport src\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 1: Understanding the Data\\n\",\n    \"\\n\",\n    \"Yellow and green taxi trip records include fields capturing \\n\",\n    \"- pick-up and drop-off dates/times\\n\",\n    \"- pick-up and drop-off locations\\n\",\n    \"- trip distances\\n\",\n    \"- itemized fares\\n\",\n    \"- rate types\\n\",\n    \"- payment types\\n\",\n    \"- driver-reported passenger counts \\n\",\n    \"  \\n\",\n    \"The data used in the attached datasets were collected and provided to the NYC Taxi and Limousine Commission (TLC) by technology providers authorized under the Taxicab & Livery Passenger Enhancement Programs (TPEP/LPEP). The trip data was not created by the TLC, and TLC makes no representations as to the accuracy of these data.\\n\",\n    \"\\n\",\n    \"**Remark**: Feel free to change the *months* and *year* in the code below, if you need more/less data. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\\n\",\n    \"from src.utils import load_data_from_google_drive\\n\",\n    \"\\n\",\n    \"# Define the base URLs for the yellow and green taxi data\\n\",\n    \"base_url_yellow = \\\"https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year}-{month}.parquet\\\"\\n\",\n    \"base_url_green = \\\"https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_{year}-{month}.parquet\\\"\\n\",\n    \"zones_url = 'https://drive.google.com/file/d/12VgjWXkyEBsxzuKFxIkAevEbao85ei0T/view?usp=sharing'\\n\",\n    \"\\n\",\n    \"# Define the months and year you're interested in\\n\",\n    \"months = ['01', '02']\\n\",\n    \"year = '2022'\\n\",\n    \"\\n\",\n    \"# Create empty lists to store the dataframes\\n\",\n    \"df_yellow_list = []\\n\",\n    \"df_green_list = []\\n\",\n    \"\\n\",\n    \"# Loop over the months\\n\",\n    \"for month in months:\\n\",\n    \"    # Create the full URL for the yellow and green taxi data\\n\",\n    \"    dfy = pd.read_parquet(base_url_yellow.format(year=year, month=month))\\n\",\n    \"    dfg = pd.read_parquet(base_url_green.format(year=year, month=month))\\n\",\n    \"    \\n\",\n    \"    # Download the data and append it to the list\\n\",\n    \"    df_yellow_list.append(dfy)\\n\",\n    \"    df_green_list.append(dfg)\\n\",\n    \"\\n\",\n    \"# Concatenate the list of dataframes into a single dataframe\\n\",\n    \"df_yellow = pd.concat(df_yellow_list)\\n\",\n    \"df_green = pd.concat(df_green_list)\\n\",\n    \"\\n\",\n    \"df_zones = load_data_from_google_drive(url=zones_url)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>VendorID</th>\\n\",\n       \"      <th>tpep_pickup_datetime</th>\\n\",\n       \"      <th>tpep_dropoff_datetime</th>\\n\",\n       \"      <th>passenger_count</th>\\n\",\n       \"      <th>trip_distance</th>\\n\",\n       \"      <th>RatecodeID</th>\\n\",\n       \"      <th>store_and_fwd_flag</th>\\n\",\n       \"      <th>PULocationID</th>\\n\",\n       \"      <th>DOLocationID</th>\\n\",\n       \"      <th>payment_type</th>\\n\",\n       \"      <th>fare_amount</th>\\n\",\n       \"      <th>extra</th>\\n\",\n       \"      <th>mta_tax</th>\\n\",\n       \"      <th>tip_amount</th>\\n\",\n       \"      <th>tolls_amount</th>\\n\",\n       \"      <th>improvement_surcharge</th>\\n\",\n       \"      <th>total_amount</th>\\n\",\n       \"      <th>congestion_surcharge</th>\\n\",\n       \"      <th>airport_fee</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2022-01-01 00:35:40</td>\\n\",\n       \"      <td>2022-01-01 00:53:29</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>3.80</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>142</td>\\n\",\n       \"      <td>236</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>14.5</td>\\n\",\n       \"      <td>3.0</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>3.65</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>21.95</td>\\n\",\n       \"      <td>2.5</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2022-01-01 00:33:43</td>\\n\",\n       \"      <td>2022-01-01 00:42:07</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>2.10</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>236</td>\\n\",\n       \"      <td>42</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>4.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>13.30</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:53:21</td>\\n\",\n       \"      <td>2022-01-01 01:02:19</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.97</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>166</td>\\n\",\n       \"      <td>166</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>7.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>1.76</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>10.56</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:25:21</td>\\n\",\n       \"      <td>2022-01-01 00:35:23</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>1.09</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>114</td>\\n\",\n       \"      <td>68</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>11.80</td>\\n\",\n       \"      <td>2.5</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:36:48</td>\\n\",\n       \"      <td>2022-01-01 01:14:20</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>4.30</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>68</td>\\n\",\n       \"      <td>163</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>23.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>3.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>30.30</td>\\n\",\n       \"      <td>2.5</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\\\\n\",\n       \"0         1  2022-01-01 00:35:40   2022-01-01 00:53:29              2.0   \\n\",\n       \"1         1  2022-01-01 00:33:43   2022-01-01 00:42:07              1.0   \\n\",\n       \"2         2  2022-01-01 00:53:21   2022-01-01 01:02:19              1.0   \\n\",\n       \"3         2  2022-01-01 00:25:21   2022-01-01 00:35:23              1.0   \\n\",\n       \"4         2  2022-01-01 00:36:48   2022-01-01 01:14:20              1.0   \\n\",\n       \"\\n\",\n       \"   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\\\\n\",\n       \"0           3.80         1.0                  N           142           236   \\n\",\n       \"1           2.10         1.0                  N           236            42   \\n\",\n       \"2           0.97         1.0                  N           166           166   \\n\",\n       \"3           1.09         1.0                  N           114            68   \\n\",\n       \"4           4.30         1.0                  N            68           163   \\n\",\n       \"\\n\",\n       \"   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\\\\n\",\n       \"0             1         14.5    3.0      0.5        3.65           0.0   \\n\",\n       \"1             1          8.0    0.5      0.5        4.00           0.0   \\n\",\n       \"2             1          7.5    0.5      0.5        1.76           0.0   \\n\",\n       \"3             2          8.0    0.5      0.5        0.00           0.0   \\n\",\n       \"4             1         23.5    0.5      0.5        3.00           0.0   \\n\",\n       \"\\n\",\n       \"   improvement_surcharge  total_amount  congestion_surcharge  airport_fee  \\n\",\n       \"0                    0.3         21.95                   2.5          0.0  \\n\",\n       \"1                    0.3         13.30                   0.0          0.0  \\n\",\n       \"2                    0.3         10.56                   0.0          0.0  \\n\",\n       \"3                    0.3         11.80                   2.5          0.0  \\n\",\n       \"4                    0.3         30.30                   2.5          0.0  \"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df_yellow.head(5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>VendorID</th>\\n\",\n       \"      <th>lpep_pickup_datetime</th>\\n\",\n       \"      <th>lpep_dropoff_datetime</th>\\n\",\n       \"      <th>store_and_fwd_flag</th>\\n\",\n       \"      <th>RatecodeID</th>\\n\",\n       \"      <th>PULocationID</th>\\n\",\n       \"      <th>DOLocationID</th>\\n\",\n       \"      <th>passenger_count</th>\\n\",\n       \"      <th>trip_distance</th>\\n\",\n       \"      <th>fare_amount</th>\\n\",\n       \"      <th>extra</th>\\n\",\n       \"      <th>mta_tax</th>\\n\",\n       \"      <th>tip_amount</th>\\n\",\n       \"      <th>tolls_amount</th>\\n\",\n       \"      <th>ehail_fee</th>\\n\",\n       \"      <th>improvement_surcharge</th>\\n\",\n       \"      <th>total_amount</th>\\n\",\n       \"      <th>payment_type</th>\\n\",\n       \"      <th>trip_type</th>\\n\",\n       \"      <th>congestion_surcharge</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:14:21</td>\\n\",\n       \"      <td>2022-01-01 00:15:33</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>42</td>\\n\",\n       \"      <td>42</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.44</td>\\n\",\n       \"      <td>3.5</td>\\n\",\n       \"      <td>0.50</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>None</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>4.80</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2022-01-01 00:20:55</td>\\n\",\n       \"      <td>2022-01-01 00:29:38</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>116</td>\\n\",\n       \"      <td>41</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>2.10</td>\\n\",\n       \"      <td>9.5</td>\\n\",\n       \"      <td>0.50</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>None</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>10.80</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>2022-01-01 00:57:02</td>\\n\",\n       \"      <td>2022-01-01 01:13:14</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>41</td>\\n\",\n       \"      <td>140</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>3.70</td>\\n\",\n       \"      <td>14.5</td>\\n\",\n       \"      <td>3.25</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>4.60</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>None</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>23.15</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>2.75</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:07:42</td>\\n\",\n       \"      <td>2022-01-01 00:15:57</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>181</td>\\n\",\n       \"      <td>181</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>1.69</td>\\n\",\n       \"      <td>8.0</td>\\n\",\n       \"      <td>0.50</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>None</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>9.30</td>\\n\",\n       \"      <td>2.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>0.00</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2022-01-01 00:07:50</td>\\n\",\n       \"      <td>2022-01-01 00:28:52</td>\\n\",\n       \"      <td>N</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>33</td>\\n\",\n       \"      <td>170</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>6.26</td>\\n\",\n       \"      <td>22.0</td>\\n\",\n       \"      <td>0.50</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>5.21</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>None</td>\\n\",\n       \"      <td>0.3</td>\\n\",\n       \"      <td>31.26</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>2.75</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   VendorID lpep_pickup_datetime lpep_dropoff_datetime store_and_fwd_flag  \\\\\\n\",\n       \"0         2  2022-01-01 00:14:21   2022-01-01 00:15:33                  N   \\n\",\n       \"1         1  2022-01-01 00:20:55   2022-01-01 00:29:38                  N   \\n\",\n       \"2         1  2022-01-01 00:57:02   2022-01-01 01:13:14                  N   \\n\",\n       \"3         2  2022-01-01 00:07:42   2022-01-01 00:15:57                  N   \\n\",\n       \"4         2  2022-01-01 00:07:50   2022-01-01 00:28:52                  N   \\n\",\n       \"\\n\",\n       \"   RatecodeID  PULocationID  DOLocationID  passenger_count  trip_distance  \\\\\\n\",\n       \"0         1.0            42            42              1.0           0.44   \\n\",\n       \"1         1.0           116            41              1.0           2.10   \\n\",\n       \"2         1.0            41           140              1.0           3.70   \\n\",\n       \"3         1.0           181           181              1.0           1.69   \\n\",\n       \"4         1.0            33           170              1.0           6.26   \\n\",\n       \"\\n\",\n       \"   fare_amount  extra  mta_tax  tip_amount  tolls_amount ehail_fee  \\\\\\n\",\n       \"0          3.5   0.50      0.5        0.00           0.0      None   \\n\",\n       \"1          9.5   0.50      0.5        0.00           0.0      None   \\n\",\n       \"2         14.5   3.25      0.5        4.60           0.0      None   \\n\",\n       \"3          8.0   0.50      0.5        0.00           0.0      None   \\n\",\n       \"4         22.0   0.50      0.5        5.21           0.0      None   \\n\",\n       \"\\n\",\n       \"   improvement_surcharge  total_amount  payment_type  trip_type  \\\\\\n\",\n       \"0                    0.3          4.80           2.0        1.0   \\n\",\n       \"1                    0.3         10.80           2.0        1.0   \\n\",\n       \"2                    0.3         23.15           1.0        1.0   \\n\",\n       \"3                    0.3          9.30           2.0        1.0   \\n\",\n       \"4                    0.3         31.26           1.0        1.0   \\n\",\n       \"\\n\",\n       \"   congestion_surcharge  \\n\",\n       \"0                  0.00  \\n\",\n       \"1                  0.00  \\n\",\n       \"2                  2.75  \\n\",\n       \"3                  0.00  \\n\",\n       \"4                  2.75  \"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df_green.head(5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from src.utils import create_scatterplot\\n\",\n    \"\\n\",\n    \"create_scatterplot(\\n\",\n    \"    df_yellow.sample(50), \\n\",\n    \"    x_col = 'trip_distance', \\n\",\n    \"    y_col = 'fare_amount', \\n\",\n    \"    title = 'trip_distance vs fare_amount', \\n\",\n    \"    xlabel = 'trip_distance',\\n\",\n    \"    ylabel = 'fare_amount',\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 2: Exploratory Data Analysis\\n\",\n    \"Conduct exploratory data analysis to understand the patterns and relationships in the data. This includes analyzing the distribution of trip distances, fares, and passenger counts, as well as the relationship between these variables.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Write your code\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 3: Spatial Analysis\\n\",\n    \"Use Kepler.gl (https://kepler.gl/) or similar tools/packages to visualize the spatial patterns of taxi rides. This includes the pickup and dropoff locations, as well as the routes taken. Analyze the spatial patterns to identify hotspots of taxi demand.\\n\",\n    \"\\n\",\n    \"You can find a good tutorial on https://docs.kepler.gl/docs/keplergl-jupyter#install for how to use it in jupyter notebook with python.\\n\",\n    \"\\n\",\n    \"**Hint** In order to visualize the pickup/dropoff location geographically, you might need to know the latitude (lat) and longitude (lng) for each location. You can find the corresponding information in the dataframe \\\"df_zones\\\".\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Shape_Leng</th>\\n\",\n       \"      <th>Shape_Area</th>\\n\",\n       \"      <th>zone</th>\\n\",\n       \"      <th>LocationID</th>\\n\",\n       \"      <th>borough</th>\\n\",\n       \"      <th>lat</th>\\n\",\n       \"      <th>lng</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.116357</td>\\n\",\n       \"      <td>0.000782</td>\\n\",\n       \"      <td>Newark Airport</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>EWR</td>\\n\",\n       \"      <td>40.689516</td>\\n\",\n       \"      <td>-74.176786</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.433470</td>\\n\",\n       \"      <td>0.004866</td>\\n\",\n       \"      <td>Jamaica Bay</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>Queens</td>\\n\",\n       \"      <td>40.625724</td>\\n\",\n       \"      <td>-73.826126</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.084341</td>\\n\",\n       \"      <td>0.000314</td>\\n\",\n       \"      <td>Allerton/Pelham Gardens</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>Bronx</td>\\n\",\n       \"      <td>40.865888</td>\\n\",\n       \"      <td>-73.849479</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.043567</td>\\n\",\n       \"      <td>0.000112</td>\\n\",\n       \"      <td>Alphabet City</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>Manhattan</td>\\n\",\n       \"      <td>40.724152</td>\\n\",\n       \"      <td>-73.977023</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.092146</td>\\n\",\n       \"      <td>0.000498</td>\\n\",\n       \"      <td>Arden Heights</td>\\n\",\n       \"      <td>5</td>\\n\",\n       \"      <td>Staten Island</td>\\n\",\n       \"      <td>40.550340</td>\\n\",\n       \"      <td>-74.189930</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   Shape_Leng  Shape_Area                     zone  LocationID        borough  \\\\\\n\",\n       \"0    0.116357    0.000782           Newark Airport           1            EWR   \\n\",\n       \"1    0.433470    0.004866              Jamaica Bay           2         Queens   \\n\",\n       \"2    0.084341    0.000314  Allerton/Pelham Gardens           3          Bronx   \\n\",\n       \"3    0.043567    0.000112            Alphabet City           4      Manhattan   \\n\",\n       \"4    0.092146    0.000498            Arden Heights           5  Staten Island   \\n\",\n       \"\\n\",\n       \"         lat        lng  \\n\",\n       \"0  40.689516 -74.176786  \\n\",\n       \"1  40.625724 -73.826126  \\n\",\n       \"2  40.865888 -73.849479  \\n\",\n       \"3  40.724152 -73.977023  \\n\",\n       \"4  40.550340 -74.189930  \"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df_zones.head(5)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Write your code\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 4: Temporal Analysis\\n\",\n    \"Analyze the temporal patterns of taxi rides. This includes the number of rides by time of day, day of the week, and month of the year. Also, analyze the relationship between temporal patterns and other variables, such as trip distance and fare.\\n\",\n    \"\\n\",\n    \"You can find very good code examples to use on this page https://www.machinelearningplus.com/time-series/time-series-analysis-python/?utm_content=cmp-true\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Write your code\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 5: Time-Series Forecasting\\n\",\n    \"Use Prophet or a similar tool to forecast the number of taxi rides in the future, respectively for green and yellow taxis. This includes creating a time-series model, tuning its parameters, and validating its performance. Also, interpret the model's predictions and identify the factors driving the forecasted trends.\\n\",\n    \"\\n\",\n    \"A good example for using Prophet to do time-series forecasting can be found here https://www.kaggle.com/code/prashant111/tutorial-time-series-forecasting-with-prophet\\n\",\n    \"\\n\",\n    \"**Hint**: In order to evaluate how your model performs, you need to split the dataset to be train and test. For time-series data, we cannot randomly select the data record (i.e. the rows) to be in train or test. Namely, all training data must be before the earliest test data. In other words, the model is always trained on historical data and then used to forecast the future.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from fbprophet import Prophet\\n\",\n    \"from fbprophet.plot import plot_plotly\\n\",\n    \"import plotly.offline as py\\n\",\n    \"py.init_notebook_mode()\\n\",\n    \"\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"%matplotlib inline\\n\",\n    \"plt.style.use('fivethirtyeight')\\n\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Task 6: Report and Presentation\\n\",\n    \"- Make this project as part of your presentation, **using beamer in LaTeX**. \\n\",\n    \"- This includes summarizing your methodology, presenting your results, and discussing your conclusions. Also, identify the limitations of your analysis and suggest areas for future research.\"\n   ]\n  },\n  {\n   \"attachments\": {},\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"base\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.13\"\n  },\n  \"orig_nbformat\": 4\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/4_temporal_spatial_data_analysis.ipynb b/4_temporal_spatial_data_analysis.ipynb
--- a/4_temporal_spatial_data_analysis.ipynb	(revision bf5af61c4461fa0beef971b5f21aeab474509d6f)
+++ b/4_temporal_spatial_data_analysis.ipynb	(date 1686662521661)
@@ -13,8 +13,8 @@
    "execution_count": 1,
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2023-06-13T12:53:49.522070Z",
-     "start_time": "2023-06-13T12:53:49.483730Z"
+     "end_time": "2023-06-13T13:20:57.198477Z",
+     "start_time": "2023-06-13T13:20:57.147615Z"
     }
    },
    "outputs": [],
@@ -50,8 +50,27 @@
   {
    "cell_type": "code",
    "execution_count": 2,
-   "metadata": {},
-   "outputs": [],
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-06-13T13:21:29.880372Z",
+     "start_time": "2023-06-13T13:21:26.710983Z"
+    }
+   },
+   "outputs": [
+    {
+     "ename": "ImportError",
+     "evalue": "Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.\nA suitable version of pyarrow or fastparquet is required for parquet support.\nTrying to import the above resulted in these errors:\n - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.\n - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet.",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mImportError\u001B[0m                               Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[2], line 20\u001B[0m\n\u001B[1;32m     17\u001B[0m \u001B[38;5;66;03m# Loop over the months\u001B[39;00m\n\u001B[1;32m     18\u001B[0m \u001B[38;5;28;01mfor\u001B[39;00m month \u001B[38;5;129;01min\u001B[39;00m months:\n\u001B[1;32m     19\u001B[0m     \u001B[38;5;66;03m# Create the full URL for the yellow and green taxi data\u001B[39;00m\n\u001B[0;32m---> 20\u001B[0m     dfy \u001B[38;5;241m=\u001B[39m \u001B[43mpd\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mread_parquet\u001B[49m\u001B[43m(\u001B[49m\u001B[43mbase_url_yellow\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mformat\u001B[49m\u001B[43m(\u001B[49m\u001B[43myear\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43myear\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mmonth\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mmonth\u001B[49m\u001B[43m)\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m     21\u001B[0m     dfg \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mread_parquet(base_url_green\u001B[38;5;241m.\u001B[39mformat(year\u001B[38;5;241m=\u001B[39myear, month\u001B[38;5;241m=\u001B[39mmonth))\n\u001B[1;32m     23\u001B[0m     \u001B[38;5;66;03m# Download the data and append it to the list\u001B[39;00m\n",
+      "File \u001B[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/io/parquet.py:501\u001B[0m, in \u001B[0;36mread_parquet\u001B[0;34m(path, engine, columns, storage_options, use_nullable_dtypes, **kwargs)\u001B[0m\n\u001B[1;32m    447\u001B[0m \u001B[38;5;129m@doc\u001B[39m(storage_options\u001B[38;5;241m=\u001B[39m_shared_docs[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mstorage_options\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n\u001B[1;32m    448\u001B[0m \u001B[38;5;28;01mdef\u001B[39;00m \u001B[38;5;21mread_parquet\u001B[39m(\n\u001B[1;32m    449\u001B[0m     path: FilePath \u001B[38;5;241m|\u001B[39m ReadBuffer[\u001B[38;5;28mbytes\u001B[39m],\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    454\u001B[0m     \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mkwargs,\n\u001B[1;32m    455\u001B[0m ) \u001B[38;5;241m-\u001B[39m\u001B[38;5;241m>\u001B[39m DataFrame:\n\u001B[1;32m    456\u001B[0m     \u001B[38;5;124;03m\"\"\"\u001B[39;00m\n\u001B[1;32m    457\u001B[0m \u001B[38;5;124;03m    Load a parquet object from the file path, returning a DataFrame.\u001B[39;00m\n\u001B[1;32m    458\u001B[0m \n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    499\u001B[0m \u001B[38;5;124;03m    DataFrame\u001B[39;00m\n\u001B[1;32m    500\u001B[0m \u001B[38;5;124;03m    \"\"\"\u001B[39;00m\n\u001B[0;32m--> 501\u001B[0m     impl \u001B[38;5;241m=\u001B[39m \u001B[43mget_engine\u001B[49m\u001B[43m(\u001B[49m\u001B[43mengine\u001B[49m\u001B[43m)\u001B[49m\n\u001B[1;32m    503\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m impl\u001B[38;5;241m.\u001B[39mread(\n\u001B[1;32m    504\u001B[0m         path,\n\u001B[1;32m    505\u001B[0m         columns\u001B[38;5;241m=\u001B[39mcolumns,\n\u001B[0;32m   (...)\u001B[0m\n\u001B[1;32m    508\u001B[0m         \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39mkwargs,\n\u001B[1;32m    509\u001B[0m     )\n",
+      "File \u001B[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/io/parquet.py:52\u001B[0m, in \u001B[0;36mget_engine\u001B[0;34m(engine)\u001B[0m\n\u001B[1;32m     49\u001B[0m         \u001B[38;5;28;01mexcept\u001B[39;00m \u001B[38;5;167;01mImportError\u001B[39;00m \u001B[38;5;28;01mas\u001B[39;00m err:\n\u001B[1;32m     50\u001B[0m             error_msgs \u001B[38;5;241m+\u001B[39m\u001B[38;5;241m=\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m - \u001B[39m\u001B[38;5;124m\"\u001B[39m \u001B[38;5;241m+\u001B[39m \u001B[38;5;28mstr\u001B[39m(err)\n\u001B[0;32m---> 52\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mImportError\u001B[39;00m(\n\u001B[1;32m     53\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mUnable to find a usable engine; \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     54\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mtried using: \u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mpyarrow\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m, \u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfastparquet\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m.\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     55\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mA suitable version of \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     56\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mpyarrow or fastparquet is required for parquet \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     57\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124msupport.\u001B[39m\u001B[38;5;130;01m\\n\u001B[39;00m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     58\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mTrying to import the above resulted in these errors:\u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     59\u001B[0m         \u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;132;01m{\u001B[39;00merror_msgs\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m     60\u001B[0m     )\n\u001B[1;32m     62\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m engine \u001B[38;5;241m==\u001B[39m \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mpyarrow\u001B[39m\u001B[38;5;124m\"\u001B[39m:\n\u001B[1;32m     63\u001B[0m     \u001B[38;5;28;01mreturn\u001B[39;00m PyArrowImpl()\n",
+      "\u001B[0;31mImportError\u001B[0m: Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.\nA suitable version of pyarrow or fastparquet is required for parquet support.\nTrying to import the above resulted in these errors:\n - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.\n - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet."
+     ]
+    }
+   ],
    "source": [
     "import pandas as pd\n",
     "from src.utils import load_data_from_google_drive\n",
@@ -89,198 +108,23 @@
   {
    "cell_type": "code",
    "execution_count": 3,
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-06-13T13:21:36.556190Z",
+     "start_time": "2023-06-13T13:21:36.428652Z"
+    }
+   },
    "outputs": [
     {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>VendorID</th>\n",
-       "      <th>tpep_pickup_datetime</th>\n",
-       "      <th>tpep_dropoff_datetime</th>\n",
-       "      <th>passenger_count</th>\n",
-       "      <th>trip_distance</th>\n",
-       "      <th>RatecodeID</th>\n",
-       "      <th>store_and_fwd_flag</th>\n",
-       "      <th>PULocationID</th>\n",
-       "      <th>DOLocationID</th>\n",
-       "      <th>payment_type</th>\n",
-       "      <th>fare_amount</th>\n",
-       "      <th>extra</th>\n",
-       "      <th>mta_tax</th>\n",
-       "      <th>tip_amount</th>\n",
-       "      <th>tolls_amount</th>\n",
-       "      <th>improvement_surcharge</th>\n",
-       "      <th>total_amount</th>\n",
-       "      <th>congestion_surcharge</th>\n",
-       "      <th>airport_fee</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>1</td>\n",
-       "      <td>2022-01-01 00:35:40</td>\n",
-       "      <td>2022-01-01 00:53:29</td>\n",
-       "      <td>2.0</td>\n",
-       "      <td>3.80</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>N</td>\n",
-       "      <td>142</td>\n",
-       "      <td>236</td>\n",
-       "      <td>1</td>\n",
-       "      <td>14.5</td>\n",
-       "      <td>3.0</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>3.65</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.3</td>\n",
-       "      <td>21.95</td>\n",
-       "      <td>2.5</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>1</td>\n",
-       "      <td>2022-01-01 00:33:43</td>\n",
-       "      <td>2022-01-01 00:42:07</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>2.10</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>N</td>\n",
-       "      <td>236</td>\n",
-       "      <td>42</td>\n",
-       "      <td>1</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>4.00</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.3</td>\n",
-       "      <td>13.30</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>2</td>\n",
-       "      <td>2022-01-01 00:53:21</td>\n",
-       "      <td>2022-01-01 01:02:19</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>0.97</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>N</td>\n",
-       "      <td>166</td>\n",
-       "      <td>166</td>\n",
-       "      <td>1</td>\n",
-       "      <td>7.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>1.76</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.3</td>\n",
-       "      <td>10.56</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>2</td>\n",
-       "      <td>2022-01-01 00:25:21</td>\n",
-       "      <td>2022-01-01 00:35:23</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>1.09</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>N</td>\n",
-       "      <td>114</td>\n",
-       "      <td>68</td>\n",
-       "      <td>2</td>\n",
-       "      <td>8.0</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>0.00</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.3</td>\n",
-       "      <td>11.80</td>\n",
-       "      <td>2.5</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>2</td>\n",
-       "      <td>2022-01-01 00:36:48</td>\n",
-       "      <td>2022-01-01 01:14:20</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>4.30</td>\n",
-       "      <td>1.0</td>\n",
-       "      <td>N</td>\n",
-       "      <td>68</td>\n",
-       "      <td>163</td>\n",
-       "      <td>1</td>\n",
-       "      <td>23.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>0.5</td>\n",
-       "      <td>3.00</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>0.3</td>\n",
-       "      <td>30.30</td>\n",
-       "      <td>2.5</td>\n",
-       "      <td>0.0</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
-       "0         1  2022-01-01 00:35:40   2022-01-01 00:53:29              2.0   \n",
-       "1         1  2022-01-01 00:33:43   2022-01-01 00:42:07              1.0   \n",
-       "2         2  2022-01-01 00:53:21   2022-01-01 01:02:19              1.0   \n",
-       "3         2  2022-01-01 00:25:21   2022-01-01 00:35:23              1.0   \n",
-       "4         2  2022-01-01 00:36:48   2022-01-01 01:14:20              1.0   \n",
-       "\n",
-       "   trip_distance  RatecodeID store_and_fwd_flag  PULocationID  DOLocationID  \\\n",
-       "0           3.80         1.0                  N           142           236   \n",
-       "1           2.10         1.0                  N           236            42   \n",
-       "2           0.97         1.0                  N           166           166   \n",
-       "3           1.09         1.0                  N           114            68   \n",
-       "4           4.30         1.0                  N            68           163   \n",
-       "\n",
-       "   payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
-       "0             1         14.5    3.0      0.5        3.65           0.0   \n",
-       "1             1          8.0    0.5      0.5        4.00           0.0   \n",
-       "2             1          7.5    0.5      0.5        1.76           0.0   \n",
-       "3             2          8.0    0.5      0.5        0.00           0.0   \n",
-       "4             1         23.5    0.5      0.5        3.00           0.0   \n",
-       "\n",
-       "   improvement_surcharge  total_amount  congestion_surcharge  airport_fee  \n",
-       "0                    0.3         21.95                   2.5          0.0  \n",
-       "1                    0.3         13.30                   0.0          0.0  \n",
-       "2                    0.3         10.56                   0.0          0.0  \n",
-       "3                    0.3         11.80                   2.5          0.0  \n",
-       "4                    0.3         30.30                   2.5          0.0  "
-      ]
-     },
-     "execution_count": 3,
-     "metadata": {},
-     "output_type": "execute_result"
+     "ename": "NameError",
+     "evalue": "name 'df_yellow' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[3], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m \u001B[43mdf_yellow\u001B[49m\u001B[38;5;241m.\u001B[39mhead(\u001B[38;5;241m5\u001B[39m)\n",
+      "\u001B[0;31mNameError\u001B[0m: name 'df_yellow' is not defined"
+     ]
     }
    ],
    "source": [
@@ -503,9 +347,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
+   "execution_count": 4,
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-06-13T13:21:40.888254Z",
+     "start_time": "2023-06-13T13:21:40.761853Z"
+    }
+   },
+   "outputs": [
+    {
+     "ename": "NameError",
+     "evalue": "name 'df_yellow' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[4], line 4\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01msrc\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mutils\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m create_scatterplot\n\u001B[1;32m      3\u001B[0m create_scatterplot(\n\u001B[0;32m----> 4\u001B[0m     \u001B[43mdf_yellow\u001B[49m\u001B[38;5;241m.\u001B[39msample(\u001B[38;5;241m50\u001B[39m), \n\u001B[1;32m      5\u001B[0m     x_col \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mtrip_distance\u001B[39m\u001B[38;5;124m'\u001B[39m, \n\u001B[1;32m      6\u001B[0m     y_col \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfare_amount\u001B[39m\u001B[38;5;124m'\u001B[39m, \n\u001B[1;32m      7\u001B[0m     title \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mtrip_distance vs fare_amount\u001B[39m\u001B[38;5;124m'\u001B[39m, \n\u001B[1;32m      8\u001B[0m     xlabel \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mtrip_distance\u001B[39m\u001B[38;5;124m'\u001B[39m,\n\u001B[1;32m      9\u001B[0m     ylabel \u001B[38;5;241m=\u001B[39m \u001B[38;5;124m'\u001B[39m\u001B[38;5;124mfare_amount\u001B[39m\u001B[38;5;124m'\u001B[39m,\n\u001B[1;32m     10\u001B[0m )\n",
+      "\u001B[0;31mNameError\u001B[0m: name 'df_yellow' is not defined"
+     ]
+    }
+   ],
    "source": [
     "from src.utils import create_scatterplot\n",
     "\n",
@@ -553,112 +414,23 @@
   {
    "cell_type": "code",
    "execution_count": 5,
-   "metadata": {},
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2023-06-13T13:21:46.575583Z",
+     "start_time": "2023-06-13T13:21:46.483016Z"
+    }
+   },
    "outputs": [
     {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>Shape_Leng</th>\n",
-       "      <th>Shape_Area</th>\n",
-       "      <th>zone</th>\n",
-       "      <th>LocationID</th>\n",
-       "      <th>borough</th>\n",
-       "      <th>lat</th>\n",
-       "      <th>lng</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>0.116357</td>\n",
-       "      <td>0.000782</td>\n",
-       "      <td>Newark Airport</td>\n",
-       "      <td>1</td>\n",
-       "      <td>EWR</td>\n",
-       "      <td>40.689516</td>\n",
-       "      <td>-74.176786</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>0.433470</td>\n",
-       "      <td>0.004866</td>\n",
-       "      <td>Jamaica Bay</td>\n",
-       "      <td>2</td>\n",
-       "      <td>Queens</td>\n",
-       "      <td>40.625724</td>\n",
-       "      <td>-73.826126</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>0.084341</td>\n",
-       "      <td>0.000314</td>\n",
-       "      <td>Allerton/Pelham Gardens</td>\n",
-       "      <td>3</td>\n",
-       "      <td>Bronx</td>\n",
-       "      <td>40.865888</td>\n",
-       "      <td>-73.849479</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>0.043567</td>\n",
-       "      <td>0.000112</td>\n",
-       "      <td>Alphabet City</td>\n",
-       "      <td>4</td>\n",
-       "      <td>Manhattan</td>\n",
-       "      <td>40.724152</td>\n",
-       "      <td>-73.977023</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>0.092146</td>\n",
-       "      <td>0.000498</td>\n",
-       "      <td>Arden Heights</td>\n",
-       "      <td>5</td>\n",
-       "      <td>Staten Island</td>\n",
-       "      <td>40.550340</td>\n",
-       "      <td>-74.189930</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "   Shape_Leng  Shape_Area                     zone  LocationID        borough  \\\n",
-       "0    0.116357    0.000782           Newark Airport           1            EWR   \n",
-       "1    0.433470    0.004866              Jamaica Bay           2         Queens   \n",
-       "2    0.084341    0.000314  Allerton/Pelham Gardens           3          Bronx   \n",
-       "3    0.043567    0.000112            Alphabet City           4      Manhattan   \n",
-       "4    0.092146    0.000498            Arden Heights           5  Staten Island   \n",
-       "\n",
-       "         lat        lng  \n",
-       "0  40.689516 -74.176786  \n",
-       "1  40.625724 -73.826126  \n",
-       "2  40.865888 -73.849479  \n",
-       "3  40.724152 -73.977023  \n",
-       "4  40.550340 -74.189930  "
-      ]
-     },
-     "execution_count": 5,
-     "metadata": {},
-     "output_type": "execute_result"
+     "ename": "NameError",
+     "evalue": "name 'df_zones' is not defined",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mNameError\u001B[0m                                 Traceback (most recent call last)",
+      "Cell \u001B[0;32mIn[5], line 1\u001B[0m\n\u001B[0;32m----> 1\u001B[0m \u001B[43mdf_zones\u001B[49m\u001B[38;5;241m.\u001B[39mhead(\u001B[38;5;241m5\u001B[39m)\n",
+      "\u001B[0;31mNameError\u001B[0m: name 'df_zones' is not defined"
+     ]
     }
    ],
    "source": [
